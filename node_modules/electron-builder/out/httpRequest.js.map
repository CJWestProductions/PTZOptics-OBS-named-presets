{
  "version": 3,
  "file": "httpRequest.js",
  "sourceRoot": "",
  "sources": [
    "../src/httpRequest.ts"
  ],
  "names": [],
  "mappings": ";;AAEA,MAAY,AAAK,gBAAM,AAAO,AAC9B,AAAC;AAAD,qBAAkC,AAAI,AACtC,AAAC;AAAD,sBAAkC,AAAK,AACvC,AAAC;AAAD,2BAA2C,AAAU,AAErD,AAAC;AAAD,MAAM,AAAY,eAAG,AAAE;AAEV,QAAQ,WAAG,WAAe,QAAC,AAAS,UAAC,AAAS,AAAC;AAE5D,mBAAmB,AAAW,KAAE,AAAmB,aAAE,AAAgC;AACnF,AAAU,eAAC,AAAG,KAAE,AAAW,aAAE,AAAC,GAAE,AAAQ,AAAC,AAC3C,AAAC;;AAED,2BAAkC,AAAsB,SAAE,AAAyC;AACjG,AAAO,YAAC,AAAE,GAAC,AAAQ,oBAAY,AAAc;AAC3C,AAAM,eAAC,AAAU,WAAC,AAAE,KAAG,AAAI;AACzB,AAAQ,qBAAC,AAAmB,AAAC;AAC7B,AAAO,oBAAC,AAAK,AAAE,AACjB,AAAC,AAAC,AACJ,AAAC,AAAC,AACJ,AAAC;SALgC;KADV;;AADP,QAAiB,oBAOhC;AAED,oBAAoB,AAAW,KAAE,AAAmB,aAAE,AAAqB,eAAE,AAAgC;AAC3G,UAAM,AAAS,YAAG,MAAQ,MAAC,AAAG,AAAC,AAC/B,AAAgF,AAChF;;0BAAsB,AAAO,QAAC;AAC5B,AAAQ,kBAAE,AAAS,UAAC,AAAQ;AAC5B,AAAI,cAAE,AAAS,UAAC,AAAI;AACpB,AAAO,iBAAE;AACP,AAAY,0BAAE,AAA2B,AAC1C,AACF;;KANe,AAAK;AAOnB,AAAE,AAAC,YAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC;AAC7B,AAAQ,qBAAC,IAAI,AAAK,MAAC,AAAwB,2BAAG,AAAQ,SAAC,AAAU,aAAG,AAAI,OAAG,AAAQ,SAAC,AAAa,AAAC,AAAC;AACnG,AAAM,AACR,AAAC,mBAH+B,AAAC;;AAKjC,cAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAQ;AAC7C,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC;AACtB,AAAE,AAAC,gBAAC,AAAa,gBAAG,AAAY,AAAC,cAAC,AAAC;AACjC,AAAU,2BAAC,AAAW,aAAE,AAAW,aAAE,AAAa,AAAE,iBAAE,AAAQ,AAAC,AACjE,AAAC,AACD,AAAI;mBAAC,AAAC;AACJ,AAAQ,yBAAC,IAAI,AAAK,MAAC,AAAwB,2BAAG,AAAY,eAAG,AAAG,AAAC,AAAC,AACpE,AAAC;;AACD,AAAM,AACR,AAAC,mBARwB,AAAC;;AAU1B,cAAM,AAAc,iBAAG,KAAiB,kBAAC,AAAW,AAAC;AACrD,AAAQ,iBAAC,AAAI,KAAC,AAAc,AAAC;AAC7B,AAAc,uBAAC,AAAE,GAAC,AAAQ,UAAE,MAAM,AAAc,eAAC,AAAK,MAAC,AAAQ,AAAC,AAAC;AAEjE,YAAI,AAAK,QAAG,AAAK;AACjB,AAAQ,iBAAC,AAAE,GAAC,AAAK;AACf,AAAK,oBAAG,AAAI,AACd,AAAC,AAAC;SAFiB;AAInB,AAAQ,iBAAC,AAAE,GAAC,AAAO;AACjB,AAAE,AAAC,gBAAC,CAAC,AAAK,AAAC,OAAC,AAAC;AACX,AAAQ,yBAAC,IAAI,AAAK,MAAC,AAAiB,AAAC,AAAC,AACxC,AAAC,AACH,AAAC,AAAC,AACJ,AAAC,AAAC;;SALqB;KA1BpB,AAAC,AAAyB,CANvB,AAAO;AAsCb,AAAiB,sBAAC,AAAO,SAAE,AAAQ,AAAC;AACpC,AAAO,YAAC,AAAE,GAAC,AAAO,SAAE,AAAQ,AAAC;AAC7B,AAAO,YAAC,AAAG,AAAE,AACf,AAAC",
  "sourcesContent": [
    "import { Socket } from \"net\"\nimport { IncomingMessage, ClientRequest } from \"http\"\nimport * as https from \"https\"\nimport { createWriteStream } from \"fs\"\nimport { parse as parseUrl } from \"url\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\nconst maxRedirects = 10\n\nexport const download = BluebirdPromise.promisify(_download)\n\nfunction _download(url: string, destination: string, callback: (error: Error) => void): void {\n  doDownload(url, destination, 0, callback)\n}\n\nexport function addTimeOutHandler(request: ClientRequest, callback: (error: Error | string) => void) {\n  request.on(\"socket\", function (socket: Socket) {\n    socket.setTimeout(60 * 1000, () => {\n      callback(\"Request timed out\")\n      request.abort()\n    })\n  })\n}\n\nfunction doDownload(url: string, destination: string, redirectCount: number, callback: (error: Error) => void) {\n  const parsedUrl = parseUrl(url)\n  // user-agent must be specified, otherwise some host can return 401 unauthorised\n  const request = https.request({\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.path,\n    headers: {\n      \"User-Agent\": \"electron-complete-builder\"\n    }\n  }, (response: IncomingMessage) => {\n    if (response.statusCode >= 400) {\n      callback(new Error(\"Request error, status \" + response.statusCode + \": \" + response.statusMessage))\n      return\n    }\n\n    const redirectUrl = response.headers.location\n    if (redirectUrl != null) {\n      if (redirectCount < maxRedirects) {\n        doDownload(redirectUrl, destination, redirectCount++, callback)\n      }\n      else {\n        callback(new Error(\"Too many redirects (> \" + maxRedirects + \")\"))\n      }\n      return\n    }\n\n    const downloadStream = createWriteStream(destination)\n    response.pipe(downloadStream)\n    downloadStream.on(\"finish\", () => downloadStream.close(callback))\n\n    let ended = false\n    response.on(\"end\", () => {\n      ended = true\n    })\n\n    response.on(\"close\", () => {\n      if (!ended) {\n        callback(new Error(\"Request aborted\"))\n      }\n    })\n  })\n  addTimeOutHandler(request, callback)\n  request.on(\"error\", callback)\n  request.end()\n}"
  ]
}
