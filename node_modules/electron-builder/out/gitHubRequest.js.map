{
  "version": 3,
  "file": "gitHubRequest.js",
  "sourceRoot": "",
  "sources": [
    "../src/gitHubRequest.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,MAAY,AAAK,gBAAM,AAAO,AAC9B,AAAC;AAED,8BAAkC,AAAe,AACjD,AAAC;AAAD,2BAA2C,AAAU,AAErD,AAAC;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AACtC,AAAK,MAAC,AAAO,QAAC,AAAS,AAAC;AAExB,uBAAiC,AAAY,MAAE,AAAa;QAAE,AAAI,6DAA6B,AAAI;QAAE,AAAM,+DAAW,AAAK;;AACzH,oBAAqB;AACnB,AAAQ,kBAAE,AAAgB;AAC1B,AAAI,cAAE,AAAI;AACV,AAAM,gBAAE,AAAM;AACd,AAAO,iBAAE;AACP,AAAM,oBAAE,AAAgC;AACxC,AAAY,0BAAE,AAA2B,AAC1C,AACF;;KARK,AAAO;AAUb,UAAM,AAAW,cAAG,AAAI,QAAI,AAAI,OAAG,AAAI,OAAG,IAAI,AAAM,OAAC,AAAI,KAAC,AAAS,UAAC,AAAI,AAAC,AAAC;AAC1E,AAAE,AAAC,QAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAO,gBAAC,AAAM,SAAG,AAAM;AACvB,AAAO,gBAAC,AAAO,QAAC,AAAc,AAAC,kBAAG,AAAkB;AACpD,AAAO,gBAAC,AAAO,QAAC,AAAgB,AAAC,oBAAG,AAAW,YAAC,AAAM,AACxD,AAAC;;AACD,AAAM,WAAC,AAAe,gBAAI,AAAO,SAAE,AAAK,OAAE,AAAE,MAAI,AAAE,GAAC,AAAG,IAAC,AAAW,AAAC,AAAC,AACtE,AAAC;;AAlBe,QAAa,gBAkB5B;AAED,yBAAmC,AAAuB,SAAE,AAAa,OAAE,AAAkF;AAC3J,AAAE,AAAC,QAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AACZ,AAAO,gBAAC,AAAQ,QAAC,AAAa,gBAAG,AAAQ,WAAG,AAAK,AACzD,AAAC;;AAED,AAAM,WAAC,IAAI,WAAe,SAAK,AAAO,SAAE,AAAM,QAAE,AAAQ;AACtD,wBAAgB,AAAK,MAAC,AAAO,QAAC,AAAO;AACnC,gBAAI,AAAC;AACH,AAAE,AAAC,oBAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC;;AAE9B,AAAM,2BAAC,IAAI,AAAS,UAAC,AAAQ,AAAC,AAAC;AAC/B,AAAM,AACR,AAAC,AACD,AAAI,2BAL6B,AAAC,AAChC,AAAmE;2BAI5D,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC;;AAEnC,AAAO,AAAE;AACT,AAAM,AACR,AAAC,2BAJqC,AAAC,AACrC,AAAoB;iBADjB,AAAE,AAAC;AAMR,oBAAI,AAAI,OAAG,AAAE;AACb,AAAQ,yBAAC,AAAW,YAAC,AAAM,AAAC;AAC5B,AAAQ,yBAAC,AAAE,GAAC,AAAM;AAChB,AAAI,4BAAI,AAAK,AACf,AAAC,AAAC;iBAFkB,AAAC,AAAa;AAIlC,AAAQ,yBAAC,AAAE,GAAC,AAAK;AACf,wBAAI,AAAC;AACH,AAAE,AAAC,4BAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAE,AAAC,gCAAC,AAAQ,SAAC,AAAO,QAAC,AAAc,AAAC,gBAAC,AAAQ,QAAC,AAAM,AAAC,AAAC;AACpD,AAAM,uCAAC,IAAI,AAAS,UAAC,AAAQ,UAAE,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC,AAAC,AAAC,AACnD,AAAC,AACD,AAAI,QAHmD,AAAC;mCAGnD,AAAC;AACJ,AAAM,uCAAC,IAAI,AAAS,UAAC,AAAQ,AAAC,AAAC,AACjC,AAAC,AACH,AAAC,AACD,AAAI;;+BAAC,AAAC;AACJ,AAAO,oCAAC,AAAI,KAAC,AAAM,WAAK,AAAC,IAAG,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC,AAAC,AACtD,AAAC,AACH,AACA;;6BAAO,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,+BAAC,AAAC,AAAC,AACX,AAAC,AACH,AAAC,AAAC,AACJ,AACA;qBALI,AAAK,AAAC;iBAdW;qBAmBd,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,uBAAC,AAAC,AAAC,AACX,AAAC,AACH,AAAC,AAAC;aAHA,AAAK,AAAC;SAtC+B,AAAC,AAAyB,CAA3D,AAAO;AA0Cb,sBAAiB,kBAAC,AAAO,SAAE,AAAM,AAAC;AAClC,AAAO,gBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC3B,AAAgB,yBAAC,AAAO,SAAE,AAAM,AAAC;AACjC,AAAQ,iBAAC,MAAM,AAAO,QAAC,AAAK,AAAE,AAAC,AACjC,AAAC,AAAC,AACJ,AAAC;KAhD+B;;AALhB,QAAe,kBAqD9B;AAED,wBAA+B,AAAK;AAClC,gBAAmB,AAAyB;YAAS,AAAW,oEAAQ,AAAI;;AAC1E,cAAM,AAAQ,SAAC,AAAU,aAAG,AAAG,MAAG,AAAQ,SAAC,AAAa,AAAG,iBAAC,AAAW,eAAI,AAAI,OAAG,AAAE,AAAG,KAAC,AAAI,OAAG,AAAI,KAAC,AAAS,UAAC,AAAW,aAAE,AAAI,MAAE,AAAI,AAAC,AAAC,AAAC,SAAG,AAAa,gBAAG,AAAI,KAAC,AAAS,UAAC,AAAQ,SAAC,AAAO,SAAE,AAAI,MAAE,AAAI,AAAC,AAAC;AADvL,aAAQ,WAAR,AAAQ,AAAiB;AAAS,aAAW,cAAX,AAAW,AAAY,AAE5E,AAAC,AACH,AAAC;;;AAJY,QAAS,YAIrB",
  "sourcesContent": [
    "import * as https from \"https\"\nimport { RequestOptions } from \"https\"\nimport { IncomingMessage, ClientRequest } from \"http\"\nimport { addTimeOutHandler } from \"./httpRequest\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\nconst __awaiter = require(\"./awaiter\")\nArray.isArray(__awaiter)\n\nexport function gitHubRequest<T>(path: string, token: string, data: { [name: string]: any; } = null, method: string = \"GET\"): BluebirdPromise<T> {\n  const options: any = {\n    hostname: \"api.github.com\",\n    path: path,\n    method: method,\n    headers: {\n      Accept: \"application/vnd.github.v3+json\",\n      \"User-Agent\": \"electron-complete-builder\",\n    }\n  }\n\n  const encodedData = data == null ? null : new Buffer(JSON.stringify(data))\n  if (encodedData != null) {\n    options.method = \"post\"\n    options.headers[\"Content-Type\"] = \"application/json\"\n    options.headers[\"Content-Length\"] = encodedData.length\n  }\n  return doGitHubRequest<T>(options, token, it => it.end(encodedData))\n}\n\nexport function doGitHubRequest<T>(options: RequestOptions, token: string, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): BluebirdPromise<T> {\n  if (token != null) {\n    (<any>options.headers).authorization = \"token \" + token\n  }\n\n  return new BluebirdPromise<T>((resolve, reject, onCancel) => {\n    const request = https.request(options, (response: IncomingMessage) => {\n      try {\n        if (response.statusCode === 404) {\n          // error is clear, we don't need to read detailed error description\n          reject(new HttpError(response))\n          return\n        }\n        else if (response.statusCode === 204) {\n          // on DELETE request\n          resolve()\n          return\n        }\n\n        let data = \"\"\n        response.setEncoding(\"utf8\")\n        response.on(\"data\", (chunk: string) => {\n          data += chunk\n        })\n\n        response.on(\"end\", () => {\n          try {\n            if (response.statusCode >= 400) {\n              if (response.headers[\"content-type\"].includes(\"json\")) {\n                reject(new HttpError(response, JSON.parse(data)))\n              }\n              else {\n                reject(new HttpError(response))\n              }\n            }\n            else {\n              resolve(data.length === 0 ? null : JSON.parse(data))\n            }\n          }\n          catch (e) {\n            reject(e)\n          }\n        })\n      }\n      catch (e) {\n        reject(e)\n      }\n    })\n    addTimeOutHandler(request, reject)\n    request.on(\"error\", reject)\n    requestProcessor(request, reject)\n    onCancel(() => request.abort())\n  })\n}\n\nexport class HttpError extends Error {\n  constructor(public response: IncomingMessage, public description: any = null) {\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, null, \"  \"))\n  }\n}"
  ]
}
