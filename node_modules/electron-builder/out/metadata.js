"use strict";

function getProductName(metadata) {
    return metadata.build.productName || metadata.productName || metadata.name;
}
exports.getProductName = getProductName;
class Platform {
    constructor(name, buildConfigurationKey) {
        this.name = name;
        this.buildConfigurationKey = buildConfigurationKey;
    }
    toString() {
        return this.name;
    }
    static fromNodePlatform(name) {
        switch (name) {
            case "darwin":
                return Platform.OSX;
            case "win32":
                return Platform.WINDOWS;
            case "linux":
                return Platform.LINUX;
        }
        throw new Error("Unknown platform: " + name);
    }
}
Platform.OSX = new Platform("osx", "osx");
Platform.LINUX = new Platform("linux", "linux");
Platform.WINDOWS = new Platform("windows", "win");
exports.Platform = Platform;
//# sourceMappingURL=metadata.js.map