{
  "version": 3,
  "file": "linuxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/linuxPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform } from \"./metadata\"\nimport { dir as _tpmDir, TmpOptions } from \"tmp\"\nimport { exec, log } from \"./util\"\nimport { outputFile, readFile, readdir } from \"fs-extra-p\"\nimport { State as Gm } from \"gm\"\nconst template = require(\"lodash.template\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst tmpDir = BluebirdPromise.promisify(<(config: TmpOptions, callback: (error: Error, path: string, cleanupCallback: () => void) => void) => void>_tpmDir)\n\nexport class LinuxPackager extends PlatformPackager<DebOptions> {\n  private readonly debOptions: DebOptions\n\n  private readonly packageFiles: Promise<Array<string>>\n  private readonly scriptFiles: Promise<Array<string>>\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    this.debOptions = Object.assign({\n      name: this.metadata.name,\n      comment: this.metadata.description,\n    }, this.customBuildOptions)\n\n    if (this.options.dist) {\n      const tempDir = tmpDir({\n        unsafeCleanup: true,\n        prefix: \"electron-builder-\"\n      })\n      this.packageFiles = this.computePackageFiles(tempDir)\n      this.scriptFiles = this.createScripts(tempDir)\n    }\n  }\n\n  protected get platform() {\n    return Platform.LINUX\n  }\n\n  private async computePackageFiles(tempDirPromise: Promise<string>): Promise<Array<string>> {\n    const tempDir = await tempDirPromise\n\n    const promises: Array<Promise<Array<string>>> = []\n    if (this.customBuildOptions == null || this.customBuildOptions.desktop == null) {\n      promises.push(this.computeDesktopIconPath(tempDir))\n    }\n\n    promises.push(this.computeDesktop(tempDir))\n\n    return Array.prototype.concat.apply([], await BluebirdPromise.all(promises))\n  }\n\n  private async computeDesktop(tempDir: string): Promise<Array<string>> {\n    const tempFile = path.join(tempDir, this.appName + \".desktop\")\n    await outputFile(tempFile, this.debOptions.desktop || `[Desktop Entry]\nName=${this.appName}\nComment=${this.debOptions.comment}\nExec=\"${this.appName}\"\nTerminal=false\nType=Application\nIcon=${this.metadata.name}\n`)\n    return [`${tempFile}=/usr/share/applications/${this.appName}.desktop`]\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIconPath(tempDir: string): Promise<Array<string>> {\n    try {\n      const mappings: Array<string> = []\n      const pngIconsDir = path.join(this.buildResourcesDir, \"icons\")\n      for (let file of (await readdir(pngIconsDir))) {\n        if (file.endsWith(\".png\") || file.endsWith(\".PNG\")) {\n          // If parseInt encounters a character that is not a numeral in the specified radix,\n          // it returns the integer value parsed up to that point\n          try {\n            const size = parseInt(file, 10)\n            if (size > 0) {\n              mappings.push(`${pngIconsDir}/${file}=/usr/share/icons/hicolor/${size}x${size}/apps/${this.metadata.name}.png`)\n            }\n          }\n          catch (e) {\n            console.error(e)\n          }\n        }\n      }\n\n      return mappings\n    }\n    catch (e) {\n      return this.createFromIcns(tempDir)\n    }\n  }\n\n  private async createFromIcns(tempDir: string): Promise<Array<string>> {\n    const outputs = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, path.join(this.buildResourcesDir, \"icon.icns\")])\n    const output = outputs[0].toString()\n    log(output)\n\n    const gm = require(\"gm\")\n\n    const imagePath = path.join(tempDir, \"icon_256x256x32.png\")\n\n    function resize(size: number): BluebirdPromise<any> {\n      return new BluebirdPromise((resolve, reject) => {\n        (<Gm>gm(imagePath))\n          .resize(size, size)\n          .write(path.join(tempDir, `icon_${size}x${size}x32.png`), error => error == null ? resolve() : reject(error))\n      })\n    }\n\n    const promises: Array<Promise<any>> = [resize(24), resize(96)]\n    if (!output.includes(\"ih32\")) {\n      promises.push(resize(48))\n    }\n    if (!output.toString().includes(\"icp6\")) {\n      promises.push(resize(64))\n    }\n    if (!output.includes(\"it32\")) {\n      promises.push(resize(128))\n    }\n\n    await BluebirdPromise.all(promises)\n\n    const appName = this.metadata.name\n\n    function createMapping(size: string) {\n      return `${tempDir}/icon_${size}x${size}x32.png=/usr/share/icons/hicolor/${size}x${size}/apps/${appName}.png`\n    }\n\n    return [\n      createMapping(\"16\"),\n      createMapping(\"24\"),\n      createMapping(\"32\"),\n      createMapping(\"48\"),\n      createMapping(\"64\"),\n      createMapping(\"96\"),\n      createMapping(\"128\"),\n      createMapping(\"256\"),\n      createMapping(\"512\"),\n    ]\n  }\n\n  private async createScripts(tempDirPromise: Promise<string>): Promise<Array<string>> {\n    const tempDir = await tempDirPromise\n    const defaultTemplatesDir = path.join(__dirname, \"..\", \"templates\", \"linux\")\n\n    const templateOptions = Object.assign({\n      // old API compatibility\n      executable: this.appName,\n    }, this.debOptions)\n\n    const afterInstallTemplate = this.debOptions.afterInstall || path.join(defaultTemplatesDir, \"after-install.tpl\")\n    const afterInstallFilePath = writeConfigFile(tempDir, afterInstallTemplate, templateOptions)\n\n    const afterRemoveTemplate = this.debOptions.afterRemove || path.join(defaultTemplatesDir, \"after-remove.tpl\")\n    const afterRemoveFilePath = writeConfigFile(tempDir, afterRemoveTemplate, templateOptions)\n\n    return await BluebirdPromise.all<string>([afterInstallFilePath, afterRemoveFilePath])\n  }\n\n  async packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    return await this.buildDeb(this.debOptions, outDir, appOutDir, arch)\n      .then(it => this.dispatchArtifactCreated(it))\n  }\n\n  private async buildDeb(options: DebOptions, outDir: string, appOutDir: string, arch: string): Promise<string> {\n    const archName = arch === \"ia32\" ? \"i386\" : \"amd64\"\n    const target = \"deb\"\n    const destination = path.join(outDir, `${this.metadata.name}-${this.metadata.version}-${archName}.${target}`)\n    const scripts = await this.scriptFiles\n    await exec(\"fpm\", [\n      \"-s\", \"dir\",\n      \"-t\", target,\n      \"--architecture\", archName,\n      \"--rpm-os\", \"linux\",\n      \"--name\", this.metadata.name,\n      \"--force\",\n      \"--after-install\", scripts[0],\n      \"--after-remove\", scripts[1],\n      \"--description\", options.comment,\n      \"--maintainer\", options.maintainer || `${this.metadata.author.name} <${this.metadata.author.email}>`,\n      \"--version\", this.metadata.version,\n      \"--package\", destination,\n      \"--deb-compression\", options.compression || \"xz\",\n      appOutDir + \"/=/opt/\" + this.appName,\n    ].concat(await this.packageFiles))\n    return destination\n  }\n}\n\nasync function writeConfigFile(tempDir: string, templatePath: string, options: any): Promise<string> {\n  const config = template(await readFile(templatePath, \"utf8\"),\n    {\n      // set interpolate explicitly to avoid troubles with templating of installer.nsi.tpl\n      interpolate: /<%=([\\s\\S]+?)%>/g\n    })(options)\n\n  const outputPath = path.join(tempDir, path.basename(templatePath, \".tpl\"))\n  await outputFile(outputPath, config)\n  return outputPath\n}\n\nexport interface DebOptions {\n  name: string\n  comment: string\n\n  maintainer: string\n\n  /**\n   * .desktop file template\n   */\n  desktop?: string\n\n  afterInstall?: string\n  afterRemove?: string\n\n  compression?: string\n}"
  ]
}
