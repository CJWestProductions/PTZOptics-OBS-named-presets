{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { InfoRetriever, ProjectMetadataProvider } from \"./repositoryInfo\"\nimport { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, getProductName } from \"./metadata\"\nimport EventEmitter = NodeJS.EventEmitter\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport packager = require(\"electron-packager-tf\")\nimport globby = require(\"globby\")\nimport { copy } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst pack = BluebirdPromise.promisify(packager)\n\nexport interface PackagerOptions {\n  arch?: string\n\n  dist?: boolean\n  githubToken?: string\n\n  sign?: string\n\n  platform?: Array<string>\n  target?: Array<string>\n\n  appDir?: string\n\n  projectDir?: string\n\n  cscLink?: string\n  csaLink?: string\n  cscKeyPassword?: string\n}\n\nexport interface BuildInfo extends ProjectMetadataProvider {\n  options: PackagerOptions\n\n  devMetadata: DevMetadata\n\n  projectDir: string\n  appDir: string\n\n  electronVersion: string\n\n  repositoryInfo: InfoRetriever\n  eventEmitter: EventEmitter\n}\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements ProjectMetadataProvider {\n  protected readonly options: PackagerOptions\n\n  protected readonly projectDir: string\n  protected readonly buildResourcesDir: string\n\n  readonly metadata: AppMetadata\n  readonly devMetadata: DevMetadata\n\n  customBuildOptions: DC\n\n  readonly appName: string\n\n  protected abstract get platform(): Platform\n\n  constructor(protected info: BuildInfo) {\n    this.options = info.options\n    this.projectDir = info.projectDir\n    this.metadata = info.metadata\n    this.devMetadata = info.devMetadata\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n\n    const buildMetadata: any = info.devMetadata.build\n    this.customBuildOptions = buildMetadata == null ? buildMetadata : buildMetadata[this.platform.buildConfigurationKey]\n\n    this.appName = getProductName(this.metadata)\n  }\n\n  protected get relativeBuildResourcesDirname() {\n    const directories = this.devMetadata.directories\n    return (directories == null ? null : directories.buildResources) || \"build\"\n  }\n\n  protected dispatchArtifactCreated(file: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", file, this.platform)\n  }\n\n  async pack(platform: string, outDir: string, appOutDir: string, arch: string): Promise<any> {\n    const version = this.metadata.version\n    let buildVersion = version\n    const buildNumber = process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM\n    if (buildNumber != null) {\n      buildVersion += \".\" + buildNumber\n    }\n\n    const options = Object.assign({\n      dir: this.info.appDir,\n      out: outDir,\n      name: this.appName,\n      platform: platform,\n      arch: arch,\n      version: this.info.electronVersion,\n      icon: path.join(this.buildResourcesDir, \"icon\"),\n      asar: true,\n      overwrite: true,\n      \"app-version\": version,\n      \"build-version\": buildVersion,\n      \"version-string\": {\n        CompanyName: this.metadata.author.name,\n        FileDescription: this.metadata.description,\n        ProductVersion: version,\n        FileVersion: buildVersion,\n        ProductName: this.appName,\n        InternalName: this.appName,\n      }\n    }, this.metadata.build, {\"tmpdir\": false})\n\n    // this option only for windows-installer\n    delete options.iconUrl\n    await pack(options)\n\n    const buildMetadata: any = this.devMetadata.build\n    let extraResources: Array<string> = buildMetadata == null ? null : buildMetadata.extraResources\n\n    const platformSpecificExtraResources = this.customBuildOptions == null ? null : this.customBuildOptions.extraResources\n    if (platformSpecificExtraResources != null) {\n      extraResources = extraResources == null ? platformSpecificExtraResources : extraResources.concat(platformSpecificExtraResources)\n    }\n\n    if (extraResources != null) {\n      const expandedPatterns = extraResources.map(it => it\n        .replace(/\\$\\{arch\\}/g, arch)\n        .replace(/\\$\\{os\\}/g, this.platform.buildConfigurationKey))\n      await BluebirdPromise.map(await globby(expandedPatterns, {cwd: this.projectDir}), it => {\n        let resourcesDir = appOutDir\n        if (platform === \"darwin\") {\n          resourcesDir = path.join(resourcesDir, this.appName + \".app\", \"Contents\", \"Resources\")\n        }\n        return copy(path.join(this.projectDir, it), path.join(resourcesDir, it))\n      })\n    }\n  }\n\n  abstract packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any>\n}"
  ]
}
