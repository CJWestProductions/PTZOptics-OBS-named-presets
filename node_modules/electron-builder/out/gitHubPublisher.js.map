{
  "version": 3,
  "file": "gitHubPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../src/gitHubPublisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Release, Asset } from \"gh-release\"\nimport { log } from \"./util\"\nimport { basename } from \"path\"\nimport { parse as parseUrl } from \"url\"\nimport * as mime from \"mime\"\nimport { stat } from \"fs-extra-p\"\nimport { createReadStream } from \"fs\"\nimport { gitHubRequest, HttpError, doGitHubRequest } from \"./gitHubRequest\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { ReadStream } from \"tty\"\nimport progressStream = require(\"progress-stream\")\nimport ProgressBar = require(\"progress\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport interface Publisher {\n  upload(path: string): Promise<any>\n}\n\nexport interface PublishOptions {\n  publish?: \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n  githubToken?: string\n}\n\nexport class GitHubPublisher implements Publisher {\n  private tag: string\n  private _releasePromise: BluebirdPromise<Release>\n\n  get releasePromise(): Promise<Release> {\n    return this._releasePromise\n  }\n\n  constructor(private owner: string, private repo: string, version: string, private token: string, private createReleaseIfNotExists: boolean = true) {\n    if (token == null || token.length === 0) {\n      throw new Error(\"GitHub Personal Access Token is not specified\")\n    }\n\n    this.tag = \"v\" + version\n    this._releasePromise = <BluebirdPromise<Release>>this.init()\n  }\n\n  private async init(): Promise<Release> {\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n    const releases = await gitHubRequest<Array<Release>>(`/repos/${this.owner}/${this.repo}/releases`, this.token)\n    for (let release of releases) {\n      if (release.tag_name === this.tag) {\n        if (!release.draft) {\n          if (this.createReleaseIfNotExists) {\n            throw new Error(\"Release must be a draft\")\n          }\n          else {\n            return null\n          }\n        }\n        return release\n      }\n    }\n\n    if (this.createReleaseIfNotExists) {\n      log(\"Release %s doesn't exists, creating one\", this.tag)\n      return this.createRelease()\n    }\n    else {\n      return null\n    }\n  }\n\n  async upload(path: string): Promise<void> {\n    const fileName = basename(path)\n    const release = await this.releasePromise\n    if (release == null) {\n      return null\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    const fileStat = await stat(path)\n    let badGatewayCount = 0\n    uploadAttempt: for (let i = 0; i < 3; i++) {\n      const progressBar = (<ReadStream>process.stdin).isTTY ? new ProgressBar(`Uploading ${fileName} [:bar] :percent :etas`, {\n        total: fileStat.size,\n        incomplete: \" \",\n        stream: process.stdout,\n        width: 20,\n      }) : null\n\n      try {\n        return await doGitHubRequest<any>({\n          hostname: parsedUrl.hostname,\n          path: parsedUrl.path,\n          method: \"POST\",\n          headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            \"User-Agent\": \"electron-complete-builder\",\n            \"Content-Type\": mime.lookup(fileName),\n            \"Content-Length\": fileStat.size\n          }\n        }, this.token, (request, reject) => {\n          const fileInputStream = createReadStream(path)\n          fileInputStream.on(\"error\", reject)\n          fileInputStream\n            .pipe(progressStream({\n              length: fileStat.size,\n              time: 1000\n            }, progress => progressBar == null ? console.log(\".\") : progressBar.tick(progress.delta)))\n            .pipe(request)\n        })\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n            // delete old artifact and re-upload\n            log(\"Artifact %s already exists, overwrite one\", fileName)\n            const assets = await gitHubRequest<Array<Asset>>(`/repos/${this.owner}/${this.repo}/releases/${release.id}/assets`, this.token)\n            for (let asset of assets) {\n              if (asset.name === fileName) {\n                await gitHubRequest<void>(`/repos/${this.owner}/${this.repo}/releases/assets/${asset.id}`, this.token, null, \"DELETE\")\n                continue uploadAttempt\n              }\n            }\n\n            log(\"Artifact %s not found, trying to upload again\", fileName)\n            continue\n          }\n          else if (e.response.statusCode === 502 && badGatewayCount++ < 3) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n  }\n\n  private createRelease() {\n    return gitHubRequest<Release>(`/repos/${this.owner}/${this.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.tag,\n      draft: true,\n    })\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<void> {\n    if (!this._releasePromise.isFulfilled()) {\n      return BluebirdPromise.resolve()\n    }\n\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await\n          gitHubRequest<void>(`/repos/${this.owner}/${this.repo}/releases/${this._releasePromise.value().id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError && (e.response.statusCode === 405 || e.response.statusCode === 502)) {\n          continue\n        }\n\n        throw e\n      }\n    }\n\n    log(\"WARN: Cannot delete release \" + this._releasePromise.value().id)\n  }\n}"
  ]
}
