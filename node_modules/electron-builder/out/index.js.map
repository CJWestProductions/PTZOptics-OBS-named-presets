{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "",
  "sources": [
    "../src/index.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,MAAO,AAAS,oBAAW,AAAa,AAAC;AACzC,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,MAAY,AAAE,aAAM,AAAY,AAEhC,AAAC;AAAD,yBAAyB,AACzB,AAAC;AADQ,8BAA4B;AAErC,yBAAmE,AAMnE,AAAC;AANkC,8BAAQ;AAAE,oCAAkC,AAE/E,AAGG;;;;;AACH,gBAAgB,AACd,AAKG;;;;;;;AACH,AAAK,qBAAY,AAAY,SAAE,AAAa;AAC1C,AAAO,kBAAG,AAAO,WAAI,AAAE;AACvB,AAAO,gBAAC,AAAG,MAAG,AAAO,QAAC,AAAG,OAAI,AAAO,QAAC,AAAG;AACxC,AAAO,gBAAC,AAAG,MAAG,AAAO,QAAC,AAAG,MACrB,AAAI,KAAC,AAAO,QAAC,AAAO,QAAC,AAAG,AAAE,OAAE,AAAO,QAAC,AAAG,AAAC,OACxC,AAAO,QAAC,AAAG,AAAE;AAEjB,AAAO,gBAAC,AAAG,IACT,AAA6B,gCAAG,AAAO,QAAC,AAAY,AAAC,cAAC,AAAO,AAC9D,AAAC,AAEF,AAAuB,AACvB,AAA8B;;;YAC1B,AAAO,QAAC,AAAG,IAAC,AAAO,QAAC,AAAG,IAAC,AAAM,SAAG,AAAC,AAAC,OAAK,AAAI,KAAC,AAAG,AAAC;AACnD,AAAO,oBAAC,AAAG,OAAI,AAAI,KAAC,AAAG,AAAC,AAC1B,AAAC,AAED,AAAuB,AACvB,AAAmB,IALmC,AAAC;SAAvD,AAAE,AAAC;;;YAMC,CAAC,AAAE,GAAC,AAAU,WAAC,AAAO,QAAC,AAAG,AAAC,AAAC;AAC9B,AAAO,oBAAC,AAAG,IAAC,AAAsB,yBAAG,AAAO,QAAC,AAAG,MAAG,AAAmB,AAAC;AACvE,AAAE,eAAC,AAAU,WAAC,AAAO,QAAC,AAAG,AAAC,KAFK,AAAC;AAGhC,AAAO,oBAAC,AAAG,IAAC,eAAc,AAAO,QAAC,AAAG,KAAE,AAAC,AAC1C,AAAC,AAED,AAA6C;SAN7C,AAAE,AAAC;;YAQD,CAAC,AAAO,QAAC,AAAO,WAAI,CAAC,AAAO,QAAC,AAAQ,YAAI,CAAC,AAAO,QAAC,AAAM,UAAI,CAAC,AAAO,QAAC,AACvE,AAAC;AACC,AAAM,mBAAC,AAAQ,SAAC,IAAI,AAAK,MAAC,AAAyB,AAAC,AAAC,AACvD,AAAC,AAED,AAA2D,4BAJzD,AAAC;SAFH,AAAE,AAAC;;YAOC,CAAC,AAAO,QAAC,AAAM,OAAC,AAAO,QAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACtC,AAAM,mBAAC,AAAQ,SAAC,IAAI,AAAK,MACvB,AAAgC,mCAAG,AAAO,QAAC,AAAQ,WAAG,AAAM,SAC3D,AAA6D,AAC/D,AAAC,AAAC,AACL,AAAC,AAED,AAAgC;SAPhC,AAAE,AAAC;;eAQH,AAAO,CAAC,AAAO,UAAG,AAAI,KAAC,AAAO,QAAC,AAAO,QAAC,AAAO,AAAC;AAE/C,YAAI,AAAC;AACH,AAAS,sBAAC,AAAO,QAAC,AAAQ,AAAC,UAAC,AAAI,AAAE,OAAC,AAAK,MAAC,AAAO,SAAE,AAAQ,AAAC,AAC7D,AACA;iBAAO,AAAK,AAAC,OAAC,AAAC;AACb,AAAM,mBAAC,AAAQ,SAAC,AAAK,AAAC,AACxB,AAAC,AACH,AAAC,AACF,AAAC;SAJE,AAAK,AAAC;KA9CD;CAPH,AAAO;AA2Db;AACE,AAAM,WAAC,AAAM,OAAC,AAAM,OAAC,AAAO,AAAC,AAC/B,AAAC;;AAFe,QAAI,OAEnB",
  "sourcesContent": [
    "import platforms = require(\"./platforms\")\nimport * as path from \"path\"\nimport * as fs from \"fs-extra-p\"\n\nexport { Packager } from \"./packager\"\nexport { PackagerOptions } from \"./platformPackager\"\nexport { AppMetadata, DevMetadata, Platform, getProductName } from \"./metadata\"\n\n/**\n * Prototype for electron-builder\n * @type {Object}\n */\nconst Builder = {\n  /**\n   * Build the installer for given platform\n   *\n   * @param  {Object}   options  option\n   * @param  {Function} callback callback\n   */\n  build: function (options: any, callback: any) {\n    options = options || {}\n    options.log = options.log || console.log\n    options.out = options.out\n      ? path.resolve(process.cwd(), options.out)\n      : process.cwd()\n\n    options.log(\n      \"- Running electron-builder \" + require(\"../package\").version\n    );\n\n    // make sure the output\n    // directory ends with a slash\n    if (options.out[options.out.length - 1] !== path.sep) {\n      options.out += path.sep;\n    }\n\n    // make sure the output\n    // directory exists\n    if (!fs.existsSync(options.out)) {\n      options.log(\"- Output directory ´\" + options.out + \"´ does not exist \")\n      fs.mkdirsSync(options.out)\n      options.log(`- Created '${options.out}`)\n    }\n\n    // FAIL when not all required options are set\n    if (\n      !options.appPath || !options.platform || !options.config || !options.basePath\n    ) {\n      return callback(new Error(\"Required option not set\"))\n    }\n\n    // FAIL when no configuration for desired platform is found\n    if (!options.config[options.platform]) {\n      return callback(new Error(\n        \"No config property found for `\" + options.platform + \"`.\\n\" +\n         \"Please check your configuration file and the documentation.\"\n      ));\n    }\n\n    // Make sure appPath is absolute\n    options.appPath = path.resolve(options.appPath)\n\n    try {\n      platforms(options.platform).init().build(options, callback)\n    }\n    catch (error) {\n      return callback(error)\n    }\n  }\n};\n\nexport function init() {\n  return Object.create(Builder)\n}\n"
  ]
}
