"use strict";

const metadata_1 = require("./metadata");
const bluebird_1 = require("bluebird");
const path = require("path");
const packager = require("electron-packager-tf");
const globby = require("globby");
const fs_extra_p_1 = require("fs-extra-p");
//noinspection JSUnusedLocalSymbols
const __awaiter = require("./awaiter");
const pack = bluebird_1.Promise.promisify(packager);
class PlatformPackager {
    constructor(info) {
        this.info = info;
        this.options = info.options;
        this.projectDir = info.projectDir;
        this.metadata = info.metadata;
        this.devMetadata = info.devMetadata;
        this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname);
        const buildMetadata = info.devMetadata.build;
        this.customBuildOptions = buildMetadata == null ? buildMetadata : buildMetadata[this.platform.buildConfigurationKey];
        this.appName = metadata_1.getProductName(this.metadata);
    }
    get platform() {}
    get relativeBuildResourcesDirname() {
        const directories = this.devMetadata.directories;
        return (directories == null ? null : directories.buildResources) || "build";
    }
    dispatchArtifactCreated(file) {
        this.info.eventEmitter.emit("artifactCreated", file, this.platform);
    }
    pack(platform, outDir, appOutDir, arch) {
        return __awaiter(this, void 0, void 0, function* () {
            const version = this.metadata.version;
            let buildVersion = version;
            const buildNumber = process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM;
            if (buildNumber != null) {
                buildVersion += "." + buildNumber;
            }
            const options = Object.assign({
                dir: this.info.appDir,
                out: outDir,
                name: this.appName,
                platform: platform,
                arch: arch,
                version: this.info.electronVersion,
                icon: path.join(this.buildResourcesDir, "icon"),
                asar: true,
                overwrite: true,
                "app-version": version,
                "build-version": buildVersion,
                "version-string": {
                    CompanyName: this.metadata.author.name,
                    FileDescription: this.metadata.description,
                    ProductVersion: version,
                    FileVersion: buildVersion,
                    ProductName: this.appName,
                    InternalName: this.appName
                }
            }, this.metadata.build, { "tmpdir": false });
            // this option only for windows-installer
            delete options.iconUrl;
            yield pack(options);
            const buildMetadata = this.devMetadata.build;
            let extraResources = buildMetadata == null ? null : buildMetadata.extraResources;
            const platformSpecificExtraResources = this.customBuildOptions == null ? null : this.customBuildOptions.extraResources;
            if (platformSpecificExtraResources != null) {
                extraResources = extraResources == null ? platformSpecificExtraResources : extraResources.concat(platformSpecificExtraResources);
            }
            if (extraResources != null) {
                const expandedPatterns = extraResources.map(it => it.replace(/\$\{arch\}/g, arch).replace(/\$\{os\}/g, this.platform.buildConfigurationKey));
                yield bluebird_1.Promise.map((yield globby(expandedPatterns, { cwd: this.projectDir })), it => {
                    let resourcesDir = appOutDir;
                    if (platform === "darwin") {
                        resourcesDir = path.join(resourcesDir, this.appName + ".app", "Contents", "Resources");
                    }
                    return fs_extra_p_1.copy(path.join(this.projectDir, it), path.join(resourcesDir, it));
                });
            }
        });
    }
}
exports.PlatformPackager = PlatformPackager;
//# sourceMappingURL=platformPackager.js.map