{
  "version": 3,
  "file": "macPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackager.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,mCAA4C,AAAoB,AAChE,AAAC;AAAD,2BAAuD,AAAY,AACnE,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,uBAA2B,AAAQ,AACnC,AAAC;AAAD,2BAA4F,AAAY,AAExG,AAAC;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AACtC,AAAK,MAAC,AAAO,QAAC,AAAS,AAAC;AAKxB,0BAAyC,mBAAgB;AAGvD,gBAAY,AAAe,MAAE,AAAuC;AAClE,cAAM,AAAI,AAAC;AAEX,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAO,WAAI,AAAI,QAAI,AAAI,KAAC,AAAO,QAAC,AAAc,kBAAI,AAAI,AAAC;AACtE,kBAAM,AAAY,eAAG,WAAoB,AAAE,uBAD4B,AAAC;AAExE,AAAY,yBAAC,AAAI,KAAC,MAAM,WAAc,eAAC,AAAY,AAAC,AAAC;AACrD,AAAI,iBAAC,AAAe,kBAAG,WAAc,eAAC,AAAY,cAAE,AAAI,KAAC,AAAO,QAAC,AAAO,SAAE,AAAI,KAAC,AAAO,QAAC,AAAc,gBAAE,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,AAC9H,AAAC,AACD,AAAI;eAAC,AAAC;AACJ,AAAI,iBAAC,AAAe,kBAAG,WAAe,QAAC,AAAO,QAAC,AAAI,AAAC,AACtD,AAAC,AACH,AAAC;;;AAED,QAAc,AAAQ;AACpB,AAAM,eAAC,WAAQ,SAAC,AAAG,AACrB,AAAC;;AAEK,AAAI,SAAC,AAAgB,UAAE,AAAc,QAAE,AAAiB,WAAE,AAAY;;;AAC1E,kBAAM,OAAU,mBAAC,AAAQ,UAAE,AAAM,QAAE,AAAS,WAAE,AAAI,AAAC;AACnD,gBAAI,AAAe,kBAAG,MAAM,AAAI,KAAC,AAAe;AAChD,AAAM,mBAAC,MAAM,AAAI,KAAC,AAAO,QAAC,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAO,UAAG,AAAM,AAAC,SAAE,AAAe,AAAC,AACzF,AAAC;;;AAEO,AAAO,YAAC,AAAgB,UAAE,AAAgC;AAChE,AAAE,AAAC,YAAC,AAAe,mBAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAe,8BAAG,EAAC,AAAO,SAAE,AAAI,KAAC,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAG,IAAC,AAAQ,AAAC,AACxE,AAAC;;AAED,AAAE,AAAC,YAAC,AAAe,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpC,mBAAG,IAAC,AAA2D,AAAC;AAChE,AAAM,mBAAC,WAAe,QAAC,AAAO,AAAE,AAClC,AAAC,AACD,AAAI;eAAC,AAAC;AACJ,mBAAG,IAAC,AAAa,AAAC;AAClB,AAAM,mBAAC,WAAI,KAAC,AAAQ,UAAE,AAAe,AAAC,AACxC,AAAC,AACH,AAAC;;;AAED,AAA4B,iCAAC,AAAc,QAAE,AAAiB;AAC5D,cAAM,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAQ,SAAC,AAAI,OAAG,AAAG,MAAG,AAAI,KAAC,AAAQ,SAAC,AAAO,UAAG,AAAM,AAAC;AACpG,AAAM,eAAC,WAAe,QAAC,AAAG,IAAC,KACrB,WAAe,SAAO,AAAO,SAAE,AAAM;AACvC,mBAAG,IAAC,AAAc,AAAC;AAEnB,kBAAM,AAAa,uBAAgC,AAAM,OAAC;AACxD,AAAK,uBAAE,AAAI,KAAC,AAAO;AACnB,AAAI,sBAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAW,AAAC;AACpD,AAAW,6BAAE,AAAE;AACf,AAAU,4BAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAgB,AAAC;AAC/D,AAAQ,2BACN;AACE,AAAG,yBAAE,AAAG,KAAE,AAAG,KAAE,AAAG,KAAE,AAAM,QAAE,AAAM,QAAE,AAAM,QAAE,AAAe,AAC5D;iBAHO,EAIR;AACE,AAAG,yBAAE,AAAG,KAAE,AAAG,KAAE,AAAG,KAAE,AAAM,QAAE,AAAM,AACnC,AACF,AACF;;aAb2C,AAAM,EAa/C,AAAI,KAAC,AAAkB,AAAC;AAE3B,AAAa,0BAAC,AAAQ,SAAC,AAAC,AAAC,GAAC,AAAI,OAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAO,UAAG,AAAM,AAAC;AAE5E,oCAAwB,AAAQ,AAAC,UAAC;AAChC,AAAM,wBAAE,AAAY;AACpB,AAAQ,0BAAE,AAAI,KAAC,AAAU;AACzB,AAAa,+BAAE,AAAa,AAC7B,AAAC;aAJc,AAAO,CAAjB,AAAO;AAKb,AAAO,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC3B,AAAO,oBAAC,AAAE,GAAC,AAAQ,UAAE,MAAM,AAAO,AAAE,AAAC,AACvC,AAAC,AAAC;SA3BuB,CAAzB,CA4BG,AAAI,KAAC,MAAM,AAAI,KAAC,AAAuB,wBAAC,AAAY,AAAC,AAAC,gBAEzD,AAAI,KAAC,AAAS,UAAC,AAAS,AAAC,WACtB,AAAI,KAAC,AAAE,MAAI,AAAI,KAAC,AAAuB,wBAAC,AAAE,AAAC,AAAC,AAChD,AAAC,AACJ,AAAC;;AAEO,AAAS,cAAC,AAAc;AAC9B,eAAG,IAAC,AAA+B,AAAC,AACpC,AAA4F,AAC5F;;cAAM,AAAU,aAAG,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,UAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAU;AAC3E,cAAM,AAAI,OAAG,CAAC,AAAO,SAAE,AAAU,YAAE,AAAI,KAAC,AAAO,UAAG,AAAM,AAAC,AAEzD,AAAuB;;YACnB,AAAO,QAAC,AAAG,IAAC,AAAS,cAAK,AAAM,AAAC;AACnC,AAAI,iBAAC,AAAO,QAAC,AAAI,AAAC,AACpB,AAAC,MAFqC,AAAC;SAAvC,AAAE,AAAC;AAIH,AAAM,sBAAM,MAAC,AAAK,OAAE,AAAI,MAAE;AACxB,AAAG,iBAAE,AAAM;AACX,AAAK,mBAAE,AAAS,AACjB,AAAC;SAHK,EAIJ,AAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAU,AAAC,AAAC,AAC9C,AAAC,AACH,AAAC;;;AAhGD;kBAgGC",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform, PlatformSpecificBuildOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { log, spawn } from \"./util\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName, sign } from \"./codeSign\"\n\nconst __awaiter = require(\"./awaiter\")\nArray.isArray(__awaiter)\n\nexport interface OsXBuildOptions extends PlatformSpecificBuildOptions, appdmg.Specification {\n}\n\nexport default class MacPackager extends PlatformPackager<OsXBuildOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null) {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.options.cscKeyPassword, this.options.csaLink)\n    }\n    else {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n  }\n\n  protected get platform() {\n    return Platform.OSX\n  }\n\n  async pack(platform: string, outDir: string, appOutDir: string, arch: string): Promise<any> {\n    await super.pack(platform, outDir, appOutDir, arch)\n    let codeSigningInfo = await this.codeSigningInfo\n    return await this.signMac(path.join(appOutDir, this.appName + \".app\"), codeSigningInfo)\n  }\n\n  private signMac(distPath: string, codeSigningInfo: CodeSigningInfo): Promise<any> {\n    if (codeSigningInfo == null) {\n      codeSigningInfo = {cscName: this.options.sign || process.env.CSC_NAME}\n    }\n\n    if (codeSigningInfo.cscName == null) {\n      log(\"App is not signed: CSC_LINK or CSC_NAME are not specified\")\n      return BluebirdPromise.resolve()\n    }\n    else {\n      log(\"Signing app\")\n      return sign(distPath, codeSigningInfo)\n    }\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any> {\n    const artifactPath = path.join(appOutDir, this.metadata.name + \"-\" + this.metadata.version + \".dmg\")\n    return BluebirdPromise.all([\n      new BluebirdPromise<any>((resolve, reject) => {\n        log(\"Creating DMG\")\n\n        const specification: appdmg.Specification = Object.assign({\n          title: this.appName,\n          icon: path.join(this.buildResourcesDir, \"icon.icns\"),\n          \"icon-size\": 80,\n          background: path.join(this.buildResourcesDir, \"background.png\"),\n          contents: [\n            {\n              \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n            },\n            {\n              \"x\": 130, \"y\": 220, \"type\": \"file\"\n            }\n          ]\n        }, this.customBuildOptions)\n\n        specification.contents[1].path = path.join(appOutDir, this.appName + \".app\")\n\n        const emitter = require(\"appdmg\")({\n          target: artifactPath,\n          basepath: this.projectDir,\n          specification: specification\n        })\n        emitter.on(\"error\", reject)\n        emitter.on(\"finish\", () => resolve())\n      })\n        .then(() => this.dispatchArtifactCreated(artifactPath)),\n\n      this.zipMacApp(appOutDir)\n        .then(it => this.dispatchArtifactCreated(it))\n    ])\n  }\n\n  private zipMacApp(outDir: string): Promise<string> {\n    log(\"Creating ZIP for Squirrel.Mac\")\n    // -y param is important - \"store symbolic links as the link instead of the referenced file\"\n    const resultPath = `${this.metadata.name}-${this.metadata.version}-mac.zip`\n    const args = [\"-ryXq\", resultPath, this.appName + \".app\"]\n\n    // todo move to options\n    if (process.env.TEST_MODE === \"true\") {\n      args.unshift(\"-0\")\n    }\n\n    return spawn(\"zip\", args, {\n      cwd: outDir,\n      stdio: \"inherit\",\n    })\n      .thenReturn(path.join(outDir, resultPath))\n  }\n}"
  ]
}
