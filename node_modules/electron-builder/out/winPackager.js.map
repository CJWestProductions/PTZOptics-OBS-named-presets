{
  "version": 3,
  "file": "winPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/winPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { downloadCertificate } from \"./codeSign\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform, PlatformSpecificBuildOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { log } from \"./util\"\nimport { readFile, deleteFile, stat, rename, copy, emptyDir, Stats, writeFile } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\n  readonly certificateFile?: string\n  readonly certificatePassword?: string\n\n  readonly icon?: string\n  readonly iconUrl?: string\n}\n\nexport default class WinPackager extends PlatformPackager<WinBuildOptions> {\n  certFilePromise: Promise<string>\n  isNsis: boolean\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    // we are not going to support build both nsis and squirrel\n    this.isNsis = this.options.target != null && this.options.target.includes(\"nsis\")\n    if (this.isNsis) {\n      // it is not an optimization, win.js cannot be runned in highly concurrent environment and we get\n      // \"Error: EBUSY: resource busy or locked, unlink 'C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\icon.ico'\"\n      // on appveyor (well, yes, it is a Windows bug)\n      // Because NSIS support will be dropped some day, correct solution is not implemented\n      const iconPath = this.customBuildOptions == null ? null : this.customBuildOptions.icon\n      require(\"../lib/win\").copyAssetsToTmpFolder(iconPath || path.join(this.buildResourcesDir, \"icon.ico\"))\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Signing_an_executable_with_Authenticode\n    // https://github.com/Squirrel/Squirrel.Windows/pull/505\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null && process.platform !== \"darwin\") {\n      this.certFilePromise = downloadCertificate(this.options.cscLink)\n        .then(path => {\n          cleanupTasks.push(() => deleteFile(path, true))\n          return path\n        })\n    }\n    else {\n      this.certFilePromise = BluebirdPromise.resolve(null)\n    }\n  }\n\n  protected get platform() {\n    return Platform.WINDOWS\n  }\n\n  pack(platform: string, outDir: string, appOutDir: string, arch: string): Promise<any> {\n    if (this.options.dist && !this.isNsis) {\n      const installerOut = this.computeDistOut(outDir, arch)\n      log(\"Removing %s\", installerOut)\n      return BluebirdPromise.all([\n        super.pack(platform, outDir, appOutDir, arch),\n        emptyDir(installerOut)\n      ])\n    }\n    else {\n      return super.pack(platform, outDir, appOutDir, arch)\n    }\n  }\n\n  private computeDistOut(outDir: string, arch: string): string {\n    return path.join(outDir, (this.isNsis ? \"nsis\" : \"win\") + (arch === \"x64\" ? \"-x64\" : \"\"))\n  }\n\n  async packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    let iconUrl = this.metadata.build.iconUrl\n    if (!iconUrl) {\n      if (this.customBuildOptions != null) {\n        iconUrl = this.customBuildOptions.iconUrl\n      }\n      if (!iconUrl) {\n        if (this.info.repositoryInfo != null) {\n          const info = await this.info.repositoryInfo.getInfo(this)\n          if (info != null) {\n            iconUrl = `https://raw.githubusercontent.com/${info.user}/${info.project}/master/${this.relativeBuildResourcesDirname}/icon.ico`\n          }\n        }\n\n        if (!iconUrl) {\n          throw new Error(\"iconUrl is not specified, please see https://github.com/loopline-systems/electron-builder#in-short\")\n        }\n      }\n    }\n\n    const certificateFile = await this.certFilePromise\n    const version = this.metadata.version\n    const installerOutDir = this.computeDistOut(outDir, arch)\n    const archSuffix = arch === \"x64\" ? \"\" : (\"-\" + arch)\n    const options = Object.assign({\n      name: this.metadata.name,\n      productName: this.appName,\n      exe: this.appName + \".exe\",\n      title: this.appName,\n      appDirectory: appOutDir,\n      outputDirectory: installerOutDir,\n      version: version,\n      description: this.metadata.description,\n      authors: this.metadata.author.name,\n      iconUrl: iconUrl,\n      setupIcon: path.join(this.buildResourcesDir, \"icon.ico\"),\n      certificateFile: certificateFile,\n      certificatePassword: this.options.cscKeyPassword,\n      fixUpPaths: false,\n      usePackageJson: false\n    }, this.customBuildOptions)\n\n    // we use metadata.name instead of appName because appName can contains unsafe chars\n    const installerExePath = path.join(installerOutDir, this.metadata.name + \"Setup-\" + version + archSuffix + \".exe\")\n    if (this.isNsis) {\n      return await this.nsis(options, installerExePath)\n    }\n\n    try {\n      await require(\"electron-winstaller-fixed\").createWindowsInstaller(options)\n    }\n    catch (e) {\n      if (!e.message.includes(\"Unable to set icon\")) {\n        throw e\n      }\n      else {\n        let fileInfo: Stats\n        try {\n          fileInfo = await stat(options.setupIcon)\n        }\n        catch (e) {\n          throw new Error(\"Please specify correct setupIcon, file \" + options.setupIcon + \" not found\")\n        }\n\n        if (fileInfo.isDirectory()) {\n          throw new Error(\"Please specify correct setupIcon, \" + options.setupIcon + \" is a directory\")\n        }\n      }\n    }\n\n    const releasesFile = path.join(installerOutDir, \"RELEASES\")\n    const nupkgPathOriginal = this.metadata.name + \"-\" + version + \"-full.nupkg\"\n    const nupkgPathWithArch = this.metadata.name + \"-\" + version + archSuffix + \"-full.nupkg\"\n\n    async function changeFileNameInTheReleasesFile(): Promise<void> {\n      const data = (await readFile(releasesFile, \"utf8\")).replace(new RegExp(\" \" + nupkgPathOriginal + \" \", \"g\"), \" \" + nupkgPathWithArch + \" \")\n      debugger\n      await writeFile(releasesFile, data)\n    }\n\n    const promises: Array<Promise<any>> = [\n      rename(path.join(installerOutDir, \"Setup.exe\"), installerExePath)\n        .then(it => this.dispatchArtifactCreated(it)),\n    ]\n\n    if (archSuffix === \"\") {\n      this.dispatchArtifactCreated(path.join(installerOutDir, nupkgPathOriginal))\n      this.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"))\n    }\n    else {\n      promises.push(\n        rename(path.join(installerOutDir, nupkgPathOriginal), path.join(installerOutDir, nupkgPathWithArch))\n          .then(it => this.dispatchArtifactCreated(it))\n      )\n      promises.push(\n        changeFileNameInTheReleasesFile()\n          .then(() => copy(releasesFile, path.join(installerOutDir, \"RELEASES-ia32\")))\n          .then(it => this.dispatchArtifactCreated(it))\n      )\n    }\n\n    await BluebirdPromise.all(promises)\n  }\n\n  private async nsis(options: any, installerFile: string) {\n    const build = <(options: any, callback: (error: Error) => void) => void>require(\"../lib/win\").init().build\n    // nsis cannot create dir\n    await emptyDir(options.outputDirectory)\n    return await BluebirdPromise.promisify(build)(Object.assign(options, {\n      log: console.log,\n      appPath: options.appDirectory,\n      out: options.outputDirectory,\n      platform: \"win32\",\n      outFile: installerFile,\n      copyAssetsToTmpFolder: false,\n      config: {\n        win: Object.assign({\n          title: options.title,\n          version: options.version,\n          icon: options.setupIcon,\n          publisher: options.authors,\n          verbosity: 2\n        }, this.customBuildOptions)\n      }\n    }))\n  }\n}"
  ]
}
