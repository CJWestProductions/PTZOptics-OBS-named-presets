{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": ";;AAoBA,wBAA+B,AAAqB;AAClD,AAAM,WAAC,AAAQ,SAAC,AAAK,MAAC,AAAW,eAAI,AAAQ,SAAC,AAAW,eAAI,AAAQ,SAAC,AAAI,AAC5E,AAAC;;AAFe,QAAc,iBAE7B;AAiDD;AAKE,gBAAmB,AAAY,MAAS,AAA6B;AAAlD,aAAI,OAAJ,AAAI,AAAQ;AAAS,aAAqB,wBAArB,AAAqB,AAAQ,AACrE,AAAC;;AAED,AAAQ;AACN,AAAM,eAAC,AAAI,KAAC,AAAI,AAClB,AAAC;;AAED,WAAc,AAAgB,iBAAC,AAAY;AACzC,AAAM,AAAC,gBAAC,AAAI,AAAC,AAAC,AAAC;AACb,iBAAK,AAAQ;AAAE,AAAM,uBAAC,AAAQ,SAAC,AAAG;iBAC7B,AAAO,OAAZ;AAAc,AAAM,uBAAC,AAAQ,SAAC,AAAO;iBAChC,AAAO,OAAZ;AAAc,AAAM,uBAAC,AAAQ,SAAC,AAAK,AACrC,AAAC;;AAED,cAAM,IAAI,AAAK,MAAC,AAAoB,uBAAG,AAAI,AAAC,AAC9C,AAAC,AACH,AAAC;;;AApBe,SAAG,MAAG,IAAI,AAAQ,SAAC,AAAK,OAAE,AAAK,AAAC;AAChC,SAAK,QAAG,IAAI,AAAQ,SAAC,AAAO,SAAE,AAAO,AAAC;AACtC,SAAO,UAAG,IAAI,AAAQ,SAAC,AAAS,WAAE,AAAK,AAAC;AAH3C,QAAQ,WAqBpB",
  "sourcesContent": [
    "export interface AppMetadata extends Metadata {\n  readonly version: string\n\n  /**\n   * The application name\n   **/\n  readonly name: string\n\n  /**\n   * As {@link AppMetadata#name}, but allows you to specify a product name for your executable which contains spaces and other special characters\n   * not allowed in the [name property]{@link https://docs.npmjs.com/files/package.json#name}.\n   */\n  readonly productName?: string\n\n  readonly description: string\n  readonly author: AuthorMetadata\n\n  readonly build: BuildMetadata\n}\n\nexport function getProductName(metadata: AppMetadata) {\n  return metadata.build.productName || metadata.productName || metadata.name\n}\n\nexport interface DevMetadata extends Metadata {\n  readonly build?: DevBuildMetadata\n\n  readonly directories?: MetadataDirectories\n}\n\nexport interface BuildMetadata {\n  readonly \"app-bundle-id\": string\n  readonly \"app-category-type\": string\n\n  readonly iconUrl: string\n\n  /**\n   * See {@link AppMetadata#productName}.\n   */\n  readonly productName?: string\n}\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface Metadata {\n  readonly repository: string | RepositoryInfo\n}\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email: string\n}\n\nexport interface MetadataDirectories {\n  readonly buildResources?: string\n}\n\nexport interface DevBuildMetadata {\n  readonly osx?: appdmg.Specification\n  readonly win?: any,\n  readonly linux?: any\n\n  readonly extraResources?: Array<string>\n}\n\nexport interface PlatformSpecificBuildOptions {\n  readonly extraResources?: Array<string>\n}\n\nexport class Platform {\n  public static OSX = new Platform(\"osx\", \"osx\")\n  public static LINUX = new Platform(\"linux\", \"linux\")\n  public static WINDOWS = new Platform(\"windows\", \"win\")\n\n  constructor(public name: string, public buildConfigurationKey: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  public static fromNodePlatform(name: string): Platform {\n    switch (name) {\n      case \"darwin\": return Platform.OSX\n      case \"win32\": return Platform.WINDOWS\n      case \"linux\": return Platform.LINUX\n    }\n\n    throw new Error(\"Unknown platform: \" + name)\n  }\n}"
  ]
}
