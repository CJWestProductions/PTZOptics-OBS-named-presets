{
  "version": 3,
  "file": "repositoryInfo.js",
  "sourceRoot": "",
  "sources": [
    "../src/repositoryInfo.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { fromUrl as parseRepositoryUrl, Info } from \"hosted-git-info\"\nimport { readText } from \"./promisifed-fs\"\nimport { AppMetadata, Metadata } from \"./metadata\"\nimport * as path from \"path\"\n\nconst __awaiter = require(\"./awaiter\")\nArray.isArray(__awaiter)\n\nexport interface ProjectMetadataProvider {\n  metadata: AppMetadata\n  devMetadata: Metadata\n}\n\nexport interface RepositorySlug {\n  user: string\n  project: string\n}\n\nexport class InfoRetriever {\n  _info: Promise<Info>\n\n  getInfo(provider?: ProjectMetadataProvider): Promise<Info> {\n    if (this._info == null) {\n      this._info = getInfo(provider)\n    }\n    return this._info\n  }\n}\n\nasync function getGitUrlFromGitConfig(): Promise<string> {\n  let data: string = null\n  try {\n    data = await readText(path.join(\".git\", \"config\"))\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      return null\n    }\n\n    throw e\n  }\n\n  const conf = data.split(/\\r?\\n/)\n  const i = conf.indexOf('[remote \"origin\"]')\n  if (i !== -1) {\n    let u = conf[i + 1]\n    if (!u.match(/^\\s*url =/)) {\n      u = conf[i + 2]\n    }\n\n    if (u.match(/^\\s*url =/)) {\n      return u.replace(/^\\s*url = /, \"\")\n    }\n  }\n  return null\n}\n\nasync function getInfo(provider?: ProjectMetadataProvider): Promise<RepositorySlug> {\n  const repo = provider == null ? null : (provider.devMetadata.repository || provider.metadata.repository)\n  if (repo == null) {\n    let url = process.env.TRAVIS_REPO_SLUG\n    if (url == null) {\n      const user: string = process.env.APPVEYOR_ACCOUNT_NAME || process.env.CIRCLE_PROJECT_USERNAME\n      const project: string = process.env.APPVEYOR_PROJECT_NAME || process.env.CIRCLE_PROJECT_REPONAME\n      if (user != null && project != null) {\n        return {\n          user: user,\n          project: project,\n        }\n      }\n\n      url = await getGitUrlFromGitConfig()\n    }\n\n    if (url != null) {\n      return parseRepositoryUrl(url)\n    }\n  }\n  else {\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\n  }\n  return null\n}"
  ]
}
